package Usuario;

import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void main(String[] args) {

        Usuario usuario1 = new Usuario("Junin da Kaloi", "123.456.789-90", "87 9 2345-6789", 4599.63);
        Usuario usuario2 = new Usuario("Genivaldo Junior", "987.456.321-08", "87 9 9874-6531", 9637.50);

        usuario1.setDataNascimento("25/06/2002");
        usuario2.setDataNascimento("15/11/1990");

        Categoria categoria1 = new Categoria("Administrador", "Gerencia do sistema", 10000, 1, true);
        Categoria categoria2 = new Categoria("Gerente", "Gerência de operações", 5000, 2, false);

        System.out.println("Usuario 1:");
        System.out.println("Nome: " + usuario1.getNome());
        System.out.println("CPF: " + usuario1.getCPF());
        System.out.println("Data Nascimento: " + usuario1.getDataNascimento());
        System.out.println("Salário: R$ " + usuario1.getSalario());
        System.out.println("Contato: " + usuario1.getContato());
        categoria1.mostrarCategoria();

        System.out.println("\nUsuario 2:");
        System.out.println("Nome: " + usuario2.getNome());
        System.out.println("CPF: " + usuario2.getCPF());
        System.out.println("Data Nascimento: " + usuario2.getDataNascimento());
        System.out.println("Salário: R$ " + usuario2.getSalario());
        System.out.println("Contato: " + usuario2.getContato());
        categoria2.mostrarCategoria();

        // Simulação de Controle Financeiro
        ControleFinanceiro controle = new ControleFinanceiro();
        controle.adicionarTransacao(5000, "receita", "Salário", "2024-09-01");
        controle.adicionarTransacao(200, "despesa", "Transporte", "2024-09-10");
        controle.adicionarTransacao(300, "despesa", "Alimentação", "2024-09-15");

        System.out.println("\n--- Transações ---");
        controle.listarTransacoes();

        System.out.println("\n--- Relatório Mensal (Setembro 2024) ---");
        controle.gerarRelatorioMensal("09", "2024");
    }
}

class Usuario {
    private String nome;
    private String cpf;
    private String dataNascimento;
    private double salario;
    private String contato;

    public Usuario(String Nome, String CPF, String Contato, double Salario) {
        this.nome = Nome;
        this.cpf = CPF;
        this.contato = Contato;
        this.salario = Salario;
    }

    void setDataNascimento(String newDataNascimento) {
        this.dataNascimento = newDataNascimento;
    }

    String getNome() {
        return nome;
    }

    String getCPF() {
        return cpf;
    }

    String getDataNascimento() {
        if (dataNascimento == null) {
            return "Usuário sem data de nascimento";
        } else {
            return dataNascimento;
        }
    }

    double getSalario() {
        return salario;
    }

    String getContato() {
        return contato;
    }
}

class Categoria {
    private String nome;
    private String descricao;
    private double orcamento;
    private int prioridade;
    private boolean ativa;

    public Categoria(String nome, String descricao, double orcamento, int prioridade, boolean ativa) {
        setNome(nome);
        setDescricao(descricao);
        setOrcamento(orcamento);
        setPrioridade(prioridade);
        this.ativa = ativa;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        if (nome == null || nome.isEmpty()) {
            throw new IllegalArgumentException("O nome não pode ser vazio.");
        }
        this.nome = nome;
    }

    public String getDescricao() {
        return descricao;
    }

    public void setDescricao(String descricao) {
        if (descricao == null || descricao.isEmpty()) {
            throw new IllegalArgumentException("A descrição não pode ser vazia.");
        }
        this.descricao = descricao;
    }

    public double getOrcamento() {
        return orcamento;
    }

    public void setOrcamento(double orcamento) {
        if (orcamento < 0) {
            throw new IllegalArgumentException("O orçamento não pode ser negativo.");
        }
        this.orcamento = orcamento;
    }

    public int getPrioridade() {
        return prioridade;
    }

    public void setPrioridade(int prioridade) {
        if (prioridade < 1 || prioridade > 5) {
            throw new IllegalArgumentException("A prioridade deve ser entre 1 e 5.");
        }
        this.prioridade = prioridade;
    }

    public boolean isAtiva() {
        return ativa;
    }

    public void setAtiva(boolean ativa) {
        this.ativa = ativa;
    }

    public void mostrarCategoria() {
        if (ativa) {
            System.out.println("Categoria: " + nome);
            System.out.println("Descrição: " + descricao);
            System.out.println("Orçamento: " + orcamento);
            System.out.println("Prioridade: " + prioridade);
            System.out.println("Ativa: " + ativa);
        } else {
            System.out.println("Categoria inativa.");
        }
    }
}

class Transacao {
    private double valor;
    private String tipo;
    private String categoria;
    private String data;

    public Transacao(double valor, String tipo, String categoria, String data) {
        this.valor = valor;
        this.tipo = tipo.toLowerCase();
        this.categoria = categoria;
        this.data = data;
    }

    public double getValor() {
        return valor;
    }

    public String getTipo() {
        return tipo;
    }

    public String getCategoria() {
        return categoria;
    }

    public String getData() {
        return data;
    }

    @Override
    public String toString() {
        return "Transacao{" + "valor=" + valor + ", tipo='" + tipo + '\'' + ", categoria='" + categoria + '\'' + ", data='" + data + '\'' + '}';
    }
}

class ControleFinanceiro {
    private List<Transacao> transacoes;

    public ControleFinanceiro() {
        this.transacoes = new ArrayList<>();
    }

    public void adicionarTransacao(double valor, String tipo, String categoria, String data) {
        Transacao transacao = new Transacao(valor, tipo, categoria, data);
        transacoes.add(transacao);
    }

    public void listarTransacoes() {
        for (Transacao transacao : transacoes) {
            System.out.println(transacao);
        }
    }

    public void gerarRelatorioMensal(String mes, String ano) {
        double totalReceitas = 0;
        double totalDespesas = 0;

        for (Transacao transacao : transacoes) {
            if (transacao.getData().startsWith(ano + "-" + mes)) {
                System.out.println(transacao);
                if (transacao.getTipo().equals("receita")) {
                    totalReceitas += transacao.getValor();
                } else if (transacao.getTipo().equals("despesa")) {
                    totalDespesas += transacao.getValor();
                }
            }
        }

        System.out.printf("Total de Receitas: R$ %.2f%n", totalReceitas);
        System.out.printf("Total de Despesas: R$ %.2f%n", totalDespesas);
        System.out.printf("Saldo Final: R$ %.2f%n", (totalReceitas - totalDespesas));
    }
}
