package Usuario;

import java.util.ArrayList;
import java.util.List;

class Main {

    public static void main(String[] args) {
        Usuario usuario1 = new Usuario("Junin da Kaloi", "123.456.789-90", "87 9 2345-6789", 4599.63);
        Usuario usuario2 = new Usuario("Genivaldo Junior", "987.456.321-08", "87 9 9874-6531", 9637.50);

        usuario1.setDataNascimento("2002-06-25");
        usuario2.setDataNascimento("1990-11-15");

        Categoria categoriaAlimentacao = new Categoria("Alimentação", "Despesas com alimentação", 500.00, 1, true);
        Categoria categoriaTransporte = new Categoria("Transporte", "Despesas com transporte", 300.00, 2, true);
        Categoria categoriaLazer = new Categoria("Lazer", "Despesas com lazer", 200.00, 3, true);

        ControleFinanceiro controleUsuario1 = new ControleFinanceiro(usuario1);
        ControleFinanceiro controleUsuario2 = new ControleFinanceiro(usuario2);

        controleUsuario1.adicionarTransacao(2000, "receita", categoriaAlimentacao.getNome(), "2024-09-01");
        controleUsuario1.adicionarTransacao(100, "despesa", categoriaAlimentacao.getNome(), "2024-09-10");
        controleUsuario1.adicionarTransacao(250, "despesa", categoriaTransporte.getNome(), "2024-09-15");

        controleUsuario2.adicionarTransacao(3500, "receita", categoriaAlimentacao.getNome(), "2024-09-01");
        controleUsuario2.adicionarTransacao(50, "despesa", categoriaLazer.getNome(), "2024-09-05");
        controleUsuario2.adicionarTransacao(150, "despesa", categoriaTransporte.getNome(), "2024-09-20");

        System.out.println("Relatório do Usuário 1:");
        controleUsuario1.gerarRelatorioMensal("09", "2024");

        System.out.println("\nRelatório do Usuário 2:");
        controleUsuario2.gerarRelatorioMensal("09", "2024");
    }
}

class Usuario {
    private String nome;
    private String cpf;
    private String contato;
    private double salario;
    private String dataNascimento;

    public Usuario(String nome, String cpf, String contato, double salario) {
        setNome(nome);
        setCpf(cpf);
        setContato(contato);
        setSalario(salario);
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        if (nome == null || nome.isEmpty()) {
            throw new IllegalArgumentException("O nome não pode ser vazio.");
        }
        this.nome = nome;
    }

    public String getCpf() {
        return cpf;
    }

    public void setCpf(String cpf) {
        if (cpf == null || !cpf.matches("\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}")) {
            throw new IllegalArgumentException("CPF inválido.");
        }
        this.cpf = cpf;
    }

    public String getContato() {
        return contato;
    }

    public void setContato(String contato) {
        if (contato == null || contato.isEmpty()) {
            throw new IllegalArgumentException("O contato não pode ser vazio.");
        }
        this.contato = contato;
    }

    public double getSalario() {
        return salario;
    }

    public void setSalario(double salario) {
        if (salario < 0) {
            throw new IllegalArgumentException("O salário não pode ser negativo.");
        }
        this.salario = salario;
    }

    public String getDataNascimento() {
        return dataNascimento;
    }

    public void setDataNascimento(String dataNascimento) {
        // Validação simples de formato de data: "yyyy-MM-dd"
        if (!dataNascimento.matches("\\d{4}-\\d{2}-\\d{2}")) {
            throw new IllegalArgumentException("Data de nascimento inválida. Use o formato yyyy-MM-dd.");
        }
        this.dataNascimento = dataNascimento;
    }
}

class Transacao {
    private double valor;
    private String tipo; 
    private String categoria;
    private String data;

    public Transacao(double valor, String tipo, String categoria, String data) {
        setValor(valor);
        setTipo(tipo);
        this.categoria = categoria;
        this.data = data;
    }

    public double getValor() {
        return valor;
    }

    public void setValor(double valor) {
        if (valor < 0) {
            throw new IllegalArgumentException("O valor não pode ser negativo.");
        }
        this.valor = valor;
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        if (!tipo.equals("receita") && !tipo.equals("despesa")) {
            throw new IllegalArgumentException("O tipo deve ser 'receita' ou 'despesa'.");
        }
        this.tipo = tipo;
    }

    public String getCategoria() {
        return categoria;
    }

    public String getData() {
        return data;
    }

    @Override
    public String toString() {
        return "Transacao{" +
                "valor=R$ " + String.format("%.2f", valor) +
                ", tipo='" + tipo + '\'' +
                ", categoria='" + categoria + '\'' +
                ", data='" + data + '\'' +
                '}';
    }
}

class Categoria {
    private String nome;
    private String descricao;
    private double orcamento;
    private int prioridade;
    private boolean ativa;

    public Categoria(String nome, String descricao, double orcamento, int prioridade, boolean ativa) {
        setNome(nome);
        setDescricao(descricao);
        setOrcamento(orcamento);
        setPrioridade(prioridade);
        this.ativa = ativa;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        if (nome == null || nome.isEmpty()) {
            throw new IllegalArgumentException("O nome não pode ser vazio.");
        }
        this.nome = nome;
    }

    public String getDescricao() {
        return descricao;
    }

    public void setDescricao(String descricao) {
        if (descricao == null || descricao.isEmpty()) {
            throw new IllegalArgumentException("A descrição não pode ser vazia.");
        }
        this.descricao = descricao;
    }

    public double getOrcamento() {
        return orcamento;
    }

    public void setOrcamento(double orcamento) {
        if (orcamento < 0) {
            throw new IllegalArgumentException("O orçamento não pode ser negativo.");
        }
        this.orcamento = orcamento;
    }

    public int getPrioridade() {
        return prioridade;
    }

    public void setPrioridade(int prioridade) {
        if (prioridade < 1 || prioridade > 5) {
            throw new IllegalArgumentException("A prioridade deve ser entre 1 e 5.");
        }
        this.prioridade = prioridade;
    }

    public boolean isAtiva() {
        return ativa;
    }

    public void setAtiva(boolean ativa) {
        this.ativa = ativa;
    }

    public void mostrarCategoria() {
        if (ativa) {
            System.out.println("Categoria: " + nome);
            System.out.println("Descrição: " + descricao);
            System.out.println("Orçamento: R$ " + orcamento);
            System.out.println("Prioridade: " + prioridade);
            System.out.println("Ativa: " + ativa);
        } else {
            System.out.println("Categoria inativa.");
        }
    }
}

class ControleFinanceiro {
    private List<Transacao> transacoes;
    private Usuario usuario; 

    public ControleFinanceiro(Usuario usuario) {
        this.transacoes = new ArrayList<>();
        this.usuario = usuario; 
    }

    public void adicionarTransacao(double valor, String tipo, String categoria, String data) {
        Transacao transacao = new Transacao(valor, tipo, categoria, data);
        transacoes.add(transacao);
    }

    public void listarTransacoes() {
        for (Transacao transacao : transacoes) {
            System.out.println(transacao);
        }
    }

    public void gerarRelatorioMensal(String mes, String ano) {
        double totalReceitas = 0;
        double totalDespesas = 0;

        System.out.println("Relatório Mensal para " + usuario.getNome() + ":");
        for (Transacao transacao : transacoes) {
            if (transacao.getData().startsWith(ano + "-" + mes)) {
                System.out.println(transacao);
                if (transacao.getTipo().equals("receita")) {
                    totalReceitas += transacao.getValor();
                } else if (transacao.getTipo().equals("despesa")) {
                    totalDespesas += transacao.getValor();
                }
            }
        }

        if (totalReceitas == 0 && totalDespesas == 0) {
            System.out.println("Nenhuma transação encontrada para o mês " + mes + "/" + ano + ".");
        } else {
            System.out.printf("Total de Receitas: R$ %.2f%n", totalReceitas);
            System.out.printf("Total de Despesas: R$ %.2f%n", totalDespesas);
            System.out.printf("Saldo Final: R$ %.2f%n", (totalReceitas - totalDespesas));
        }
    }
}
